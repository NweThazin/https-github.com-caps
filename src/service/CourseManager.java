package service;

import java.sql.SQLException;
import java.util.ArrayList;

import dao.AutoGenerateIDDAO;
import dao.CourseDAO;
import dao.DAOFactory;
import exception.DAOException;
import exception.NotFoundException;
import model.CourseDTO;
import model.LecturerDTO;

public class CourseManager {

	private CourseDAO courseDAO;
	private AutoGenerateIDDAO autogenerateDAO;

	public CourseManager() {
		courseDAO = DAOFactory.getCourseDAO();
		autogenerateDAO = DAOFactory.getGenerateIDDAO();
	}

	@SuppressWarnings("finally")
	public ArrayList<CourseDTO> findCourseByCriteria(CourseDTO cso) {
		ArrayList<CourseDTO> currentList = new ArrayList<CourseDTO>();
		try {
			currentList = courseDAO.findCourseByCriteria(cso);
		} catch (DAOException e) {
			e.printStackTrace();
		} finally {
			return currentList;
		}
	}

	@SuppressWarnings("finally")
	public CourseDTO findCourse(String courseID) {
		CourseDTO currentCourse = new CourseDTO();
		try {
			currentCourse = courseDAO.findCourseByID(courseID);
		} catch (DAOException e) {
			e.printStackTrace();
		} finally {
			return currentCourse;
		}
	}

	public ArrayList<CourseDTO> findAllCourse() {
		ArrayList<CourseDTO> currentList = new ArrayList<CourseDTO>();
		try {
			currentList = courseDAO.findAllCourse();
		} catch (DAOException e) {
			e.printStackTrace();
		} finally {
		}
		return currentList;
	}

	public void insertCourse(CourseDTO course) {
		try {
			courseDAO.insertCourse(course);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}

	public void updateCourse(CourseDTO course) {
		try {
			courseDAO.updateCourse(course);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}

	public void deleteCourse(CourseDTO course) throws ClassNotFoundException, SQLException, NotFoundException {
		try {
			courseDAO.deleteCourse(course);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}

	public String getCourseID() {
		try {
			return autogenerateDAO.generateCourseID();
		} catch (ClassNotFoundException | SQLException | NotFoundException e) {
			e.printStackTrace();
		}
		return "";
	}
	//Latest Grade a course part
	public ArrayList<CourseDTO> FindCourseByLecturerID(String lecturerID) {
		try {
			CourseDTO courseDTO = new CourseDTO();
			LecturerDTO lecturerDTO = new LecturerDTO();

			lecturerDTO.setLecturerID(lecturerID); //assign lecturer id to lecturer object
			courseDTO.setLecturer(lecturerDTO);//assign lecturer to course
			courseDTO.setCourseName("");
			return courseDAO.findCourseByCriteria(courseDTO);
			
		} catch (DAOException e) {
		}
		return null;
	}
	public ArrayList<CourseDTO> searchCourse(CourseDTO course)
	{
		try {
			return courseDAO.SearchCourse(course);
		} catch (DAOException e) {
			e.printStackTrace();
		}
		return null;
	}
}
