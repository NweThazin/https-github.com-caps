package service;

import java.sql.SQLException;
import java.util.ArrayList;

import dao.AutoGenerateIDDAO;
import dao.DAOFactory;
import dao.LecturerDAO;
import exception.DAOException;
import exception.NotFoundException;
import model.LecturerDTO;


public class LecturerManager {

	private LecturerDAO lecturerDAO;
	private AutoGenerateIDDAO autogenerateDAO;

	public LecturerManager() {
		lecturerDAO = DAOFactory.getLecturerDAO();
		autogenerateDAO=DAOFactory.getGenerateIDDAO();
	}

	@SuppressWarnings("finally")
	public ArrayList<LecturerDTO> findLecturerByCriteria(LecturerDTO lso) {

		ArrayList<LecturerDTO> currentList = new ArrayList<LecturerDTO>();
		try {
			currentList = lecturerDAO.findLecturerByCriteria(lso);
		} catch (DAOException e) {
			e.printStackTrace();
		} finally {
			return currentList;
		}
	}

	@SuppressWarnings("finally")
	public LecturerDTO findLecturer(String lecturerID) {

		LecturerDTO currentLecturer = new LecturerDTO();
		try {
			currentLecturer = lecturerDAO.findLecturerByID(lecturerID);
		} catch (DAOException e) {
			e.printStackTrace();
		} finally {
			return currentLecturer;
		}
	}

	@SuppressWarnings("finally")
	public ArrayList<LecturerDTO> findAllLecturer() {

		ArrayList<LecturerDTO> currentList = new ArrayList<LecturerDTO>();
		try {
			currentList = lecturerDAO.findAllLecturer();
		} catch (DAOException e) {
			e.printStackTrace();
		} finally {
			return currentList;
		}
	}

	public void insertLecturer(LecturerDTO lecturer) {
		try {
			lecturerDAO.insertLecturer(lecturer);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}

	public void updateLecturer(LecturerDTO lecturer) {
		try {
			lecturerDAO.updateLecturer(lecturer);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}

	public void deleteLecturer(LecturerDTO lecturer) throws ClassNotFoundException, SQLException, NotFoundException {
		try {
			lecturerDAO.deleteLecturer(lecturer);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}

	public String getLecturerID() {
		try {
			return autogenerateDAO.generateLecturerID();
		} catch (ClassNotFoundException | SQLException | NotFoundException e) {
			e.printStackTrace();
		}
		return "";
	}
	
	public ArrayList<LecturerDTO> getLecturerLists() throws DAOException, ClassNotFoundException {
		try {
			LecturerDAO lecturerDAO = DAOFactory.getLecturerDAO();
			return lecturerDAO.findAllLecturer();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
